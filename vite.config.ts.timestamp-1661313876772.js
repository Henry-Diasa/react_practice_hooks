// vite.config.ts
import { defineConfig, normalizePath } from "vite";
import viteEslint from "vite-plugin-eslint";
import viteStylelint from "@amatlash/vite-plugin-stylelint";
import react from "@vitejs/plugin-react";
import path from "path";
import autoprefixer from "autoprefixer";
import windi from "vite-plugin-windicss";
var variablePath = normalizePath(path.resolve("./src/variable.scss"));
var vite_config_default = defineConfig({
  css: {
    preprocessorOptions: {
      scss: {
        additionalData: `@import "${variablePath}";`
      }
    },
    modules: {
      generateScopedName: "[name]__[local]__[hash:base64:5]"
    },
    postcss: {
      plugins: [
        autoprefixer({
          overrideBrowserslist: ["Chrome > 40", "ff > 31", "ie 11"]
        })
      ]
    }
  },
  plugins: [
    react({
      babel: {
        plugins: ["babel-plugin-styled-components", "@emotion/babel-plugin"]
      },
      jsxImportSource: "@emotion/react"
    }),
    windi(),
    viteEslint(),
    viteStylelint({
      exclude: /windicss|node_modules/
    })
  ]
});
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IGRlZmluZUNvbmZpZywgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJ2aXRlXCI7XG5pbXBvcnQgdml0ZUVzbGludCBmcm9tIFwidml0ZS1wbHVnaW4tZXNsaW50XCI7XG5pbXBvcnQgdml0ZVN0eWxlbGludCBmcm9tIFwiQGFtYXRsYXNoL3ZpdGUtcGx1Z2luLXN0eWxlbGludFwiO1xuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCBhdXRvcHJlZml4ZXIgZnJvbSBcImF1dG9wcmVmaXhlclwiO1xuaW1wb3J0IHdpbmRpIGZyb20gXCJ2aXRlLXBsdWdpbi13aW5kaWNzc1wiO1xuXG4vLyBcdTc1Mjggbm9ybWFsaXplUGF0aCBcdTg5RTNcdTUxQjMgd2luZG93IFx1NEUwQlx1NzY4NFx1OERFRlx1NUY4NFx1OTVFRVx1OTg5OFxuY29uc3QgdmFyaWFibGVQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoLnJlc29sdmUoXCIuL3NyYy92YXJpYWJsZS5zY3NzXCIpKTtcbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICAvLyBcdTVGMTVcdTUxNjUgcGF0aCBcdTUzMDVcdTZDRThcdTYxMEZcdTRFMjRcdTcwQjk6XG4gIC8vIDEuIFx1NEUzQVx1OTA3Rlx1NTE0RFx1N0M3Qlx1NTc4Qlx1NjJBNVx1OTUxOVx1RkYwQ1x1NEY2MFx1OTcwMFx1ODk4MVx1OTAxQVx1OEZDNyBgcG5wbSBpIEB0eXBlcy9ub2RlIC1EYCBcdTVCODlcdTg4QzVcdTdDN0JcdTU3OEJcbiAgLy8gMi4gdHNjb25maWcubm9kZS5qc29uIFx1NEUyRFx1OEJCRVx1N0Y2RSBgYWxsb3dTeW50aGV0aWNEZWZhdWx0SW1wb3J0czogdHJ1ZWBcdUZGMENcdTRFRTVcdTUxNDFcdThCQjhcdTRFMEJcdTk3NjJcdTc2ODQgZGVmYXVsdCBcdTVCRkNcdTUxNjVcdTY1QjlcdTVGMEZcbiAgLy8gXHU0RkVFXHU2NTM5aW5kZXguaHRtbFx1NzY4NFx1OUVEOFx1OEJBNFx1OERFRlx1NUY4NFxuICAvLyByb290OiBwYXRoLnJlc29sdmUoXCIvVXNlcnMvZnVxaWFuZy9EZXNrdG9wL3JlYWN0X3ByYWN0aWNlX2hvb2tzXCIsIFwic3JjXCIpLFxuICBjc3M6IHtcbiAgICBwcmVwcm9jZXNzb3JPcHRpb25zOiB7XG4gICAgICBzY3NzOiB7XG4gICAgICAgIC8vIGFkZGl0aW9uYWxEYXRhIFx1NzY4NFx1NTE4NVx1NUJCOVx1NEYxQVx1NTcyOFx1NkJDRlx1NEUyQSBzY3NzIFx1NjU4N1x1NEVGNlx1NzY4NFx1NUYwMFx1NTkzNFx1ODFFQVx1NTJBOFx1NkNFOFx1NTE2NVxuICAgICAgICBhZGRpdGlvbmFsRGF0YTogYEBpbXBvcnQgXCIke3ZhcmlhYmxlUGF0aH1cIjtgXG4gICAgICB9XG4gICAgfSxcbiAgICBtb2R1bGVzOiB7XG4gICAgICAvLyBcdTRFMDBcdTgyMkNcdTYyMTFcdTRFRUNcdTUzRUZcdTRFRTVcdTkwMUFcdThGQzcgZ2VuZXJhdGVTY29wZWROYW1lIFx1NUM1RVx1NjAyN1x1Njc2NVx1NUJGOVx1NzUxRlx1NjIxMFx1NzY4NFx1N0M3Qlx1NTQwRFx1OEZEQlx1ODg0Q1x1ODFFQVx1NUI5QVx1NEU0OVxuICAgICAgLy8gXHU1MTc2XHU0RTJEXHVGRjBDbmFtZSBcdTg4NjhcdTc5M0FcdTVGNTNcdTUyNERcdTY1ODdcdTRFRjZcdTU0MERcdUZGMENsb2NhbCBcdTg4NjhcdTc5M0FcdTdDN0JcdTU0MERcbiAgICAgIGdlbmVyYXRlU2NvcGVkTmFtZTogXCJbbmFtZV1fX1tsb2NhbF1fX1toYXNoOmJhc2U2NDo1XVwiXG4gICAgfSxcbiAgICBwb3N0Y3NzOiB7XG4gICAgICBwbHVnaW5zOiBbXG4gICAgICAgIGF1dG9wcmVmaXhlcih7XG4gICAgICAgICAgLy8gXHU2MzA3XHU1QjlBXHU3NkVFXHU2ODA3XHU2RDRGXHU4OUM4XHU1NjY4XG4gICAgICAgICAgb3ZlcnJpZGVCcm93c2Vyc2xpc3Q6IFtcIkNocm9tZSA+IDQwXCIsIFwiZmYgPiAzMVwiLCBcImllIDExXCJdXG4gICAgICAgIH0pXG4gICAgICBdXG4gICAgfVxuICB9LFxuICBwbHVnaW5zOiBbXG4gICAgcmVhY3Qoe1xuICAgICAgYmFiZWw6IHtcbiAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgIC8vIFx1OTAwMlx1OTE0RCBzdHlsZWQtY29tcG9uZW50XG4gICAgICAgICAgXCJiYWJlbC1wbHVnaW4tc3R5bGVkLWNvbXBvbmVudHNcIixcbiAgICAgICAgICAvLyBcdTkwMDJcdTkxNEQgZW1vdGlvblxuICAgICAgICAgIFwiQGVtb3Rpb24vYmFiZWwtcGx1Z2luXCJcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIC8vIFx1NkNFOFx1NjEwRjogXHU1QkY5XHU0RThFIGVtb3Rpb25cdUZGMENcdTk3MDBcdTg5ODFcdTUzNTVcdTcyRUNcdTUyQTBcdTRFMEFcdThGRDlcdTRFMkFcdTkxNERcdTdGNkVcbiAgICAgIC8vIFx1OTAxQVx1OEZDNyBgQGVtb3Rpb24vcmVhY3RgIFx1NTMwNVx1N0YxNlx1OEJEMSBlbW90aW9uIFx1NEUyRFx1NzY4NFx1NzI3OVx1NkI4QSBqc3ggXHU4QkVEXHU2Q0Q1XG4gICAgICBqc3hJbXBvcnRTb3VyY2U6IFwiQGVtb3Rpb24vcmVhY3RcIlxuICAgIH0pLFxuICAgIHdpbmRpKCksXG4gICAgdml0ZUVzbGludCgpLFxuICAgIHZpdGVTdHlsZWxpbnQoe1xuICAgICAgLy8gXHU1QkY5XHU2N0QwXHU0RTlCXHU2NTg3XHU0RUY2XHU2MzkyXHU5NjY0XHU2OEMwXHU2N0U1XG4gICAgICBleGNsdWRlOiAvd2luZGljc3N8bm9kZV9tb2R1bGVzL1xuICAgIH0pXG4gIF1cbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsY0FBYyxxQkFBcUI7QUFDNUMsT0FBTyxnQkFBZ0I7QUFDdkIsT0FBTyxtQkFBbUI7QUFDMUIsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sVUFBVTtBQUNqQixPQUFPLGtCQUFrQjtBQUN6QixPQUFPLFdBQVc7QUFHbEIsSUFBTSxlQUFlLGNBQWMsS0FBSyxRQUFRLHFCQUFxQixDQUFDO0FBRXRFLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBTTFCLEtBQUs7QUFBQSxJQUNILHFCQUFxQjtBQUFBLE1BQ25CLE1BQU07QUFBQSxRQUVKLGdCQUFnQixZQUFZO0FBQUEsTUFDOUI7QUFBQSxJQUNGO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFHUCxvQkFBb0I7QUFBQSxJQUN0QjtBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ1AsU0FBUztBQUFBLFFBQ1AsYUFBYTtBQUFBLFVBRVgsc0JBQXNCLENBQUMsZUFBZSxXQUFXLE9BQU87QUFBQSxRQUMxRCxDQUFDO0FBQUEsTUFDSDtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxNQUFNO0FBQUEsTUFDSixPQUFPO0FBQUEsUUFDTCxTQUFTO0FBQUEsVUFFUDtBQUFBLFVBRUE7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLE1BR0EsaUJBQWlCO0FBQUEsSUFDbkIsQ0FBQztBQUFBLElBQ0QsTUFBTTtBQUFBLElBQ04sV0FBVztBQUFBLElBQ1gsY0FBYztBQUFBLE1BRVosU0FBUztBQUFBLElBQ1gsQ0FBQztBQUFBLEVBQ0g7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
